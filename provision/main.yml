---

- hosts: all
  sudo: yes

  tasks:
    - name: install nodejs repo
      copy: src=files/nodesource-el.repo dest=/etc/yum.repos.d/nodesource-el.repo

    - name: copy nodjs repo GPG key
      copy: src=files/NODESOURCE-GPG-SIGNING-KEY-EL dest=/etc/pki/rpm-gpg/NODESOURCE-GPG-SIGNING-KEY-EL

    - yum: "name={{ item }} state=present"
      async: 1000
      poll: 0
      register: yum_sleeper
      with_items:
        - git
        - python-devel
        - postgresql
        - postgresql-devel
        - postgresql-contrib
        - postgresql-server
        - gcc
        - make
        - nodejs
        - libmemcached-devel
        - zlib-devel
        - memcached

    - name: install pip
      get_url: url=https://bootstrap.pypa.io/get-pip.py dest=/tmp/get-pip.py mode=0755

    - name: installing pip
      command: "/bin/python /tmp/get-pip.py creates=/bin/pip"

    - name: disable firewall
      service: name=firewalld state=stopped enabled=false

    - name: install requirements
      pip: "requirements=/vagrant/requirements.txt"
      args:
        extra_args: --find-links=/vagrant/provision/files/.wheelhouse 

    - name: wait for yum install to finish
      async_status: jid={{ yum_sleeper.ansible_job_id }}
      register: job_result
      until: job_result.finished is defined and job_result.finished
      retries: 30

    - name: install bower
      npm: name=bower global=yes
      async: 1000
      poll: 0
      register: bower_sleeper

    - command: "/bin/postgresql-setup initdb creates=/var/lib/pgsql/data/pg_hba.conf"
      ignore_errors: true

    - replace:
      args:
        dest: /var/lib/pgsql/data/pg_hba.conf
        regexp: 'host[ \t]* all[ \t]* all[ \t]* 127.0.0.1/32[ \t]*ident'
        replace: 'host   all  all    127.0.0.1/32    trust'

    - service: name=postgresql state=started enabled=true
    - service: name=memcached state=started enabled=true

    - name: wait for bower install to finish
      async_status: jid={{ bower_sleeper.ansible_job_id }}
      register: job_result
      until: job_result.finished is defined and job_result.finished
      retries: 30

- hosts: all
  sudo: yes
  sudo_user: postgres
  gather_facts: false
  vars:
    db_name: mysite
    db_user: bucha
    db_pass: br00klyn

  tasks:
    - name: create database
      postgresql_db:
      args:
        name: "{{ db_name }}"
    - name: create database user
      postgresql_user:
      args:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        role_attr_flags: "CREATEDB,CREATEROLE,SUPERUSER,LOGIN"

- hosts: all
  gather_facts: false
  vars:
    db_name: mysite
    db_user: bucha
    db_pass: br00klyn
    database_url: 'postgres://{{db_user}}:{{db_pass}}@127.0.0.1/{{db_name}}'
    django_debug: true
  tasks:
    - name: kill gunicorn
      shell: "pkill -9 gunicorn"
      register: kill_gunicorn
      failed_when: "kill_gunicorn.rc > 1"

    - name: Perform Django Bower Install
      shell: "DATABASE_URL='{{ database_url }}' /usr/bin/python /vagrant/manage.py bower install --no-color"

    - name: Compress Static Files
      shell: "DATABASE_URL='{{ database_url }}' /usr/bin/python /vagrant/manage.py compress --force"

    - name: Perform Django Static File Collection
      shell: "DATABASE_URL='{{ database_url }}' /usr/bin/python /vagrant/manage.py collectstatic --no-color --noinput"

    - name: Perform Django Database Migrations for auth
      shell: "DATABASE_URL='{{ database_url }}' /usr/bin/python /vagrant/manage.py migrate auth"

    - name: Perform Django Database Migrations
      shell: "DATABASE_URL='{{ database_url }}' /usr/bin/python /vagrant/manage.py migrate"

    - name: Load test data
      shell: "DATABASE_URL='{{ database_url }}' /usr/bin/python /vagrant/manage.py loaddata kombucha_manager dev --no-color"

    - name: start gnuicorn
      shell: "DATABASE_URL='{{ database_url }}' DJANGO_DEBUG={{ django_debug }} gunicorn mysite.wsgi --log-file /tmp/gunicorn.log -D --pythonpath=/vagrant/ --bind 0.0.0.0:8000"

    - name: place test runner script
      template: src=templates/run_tests.sh.j2 dest=/tmp/run_tests.sh mode=0755
